substitutions:
  bme_address: "0x77"
  humidity_offset: "0"
  pressure_offset: "0"
  temperature_offset: "-6"

sensor:
  - platform: bme680
    address: ${bme_address}
    temperature:
      id: temperature
      name: "Temperature"
      filters:
        - offset: ${temperature_offset}
        - lambda: "return x + id(temperature_offset_ui).state;" 
    pressure:
      name: "Pressure"
      id: pressure
      device_class: atmospheric_pressure
      filters:
        - offset: ${pressure_offset}
        - lambda: "return x + id(pressure_offset_ui).state;"
    gas_resistance:
      name: "Gas Resistance" # in Ω
      id: gas_resistance
    humidity:
      name: "Humidity"
      id: humidity
      filters:
        - offset: ${humidity_offset}
        - lambda: "return x + id(humidity_offset_ui).state;"
  - platform: template
    name: "IAQ"
    id: iaq
    icon: "mdi:air-filter"
    device_class: aqi
    # lambda: |-
    #   const float humidity_baseline = 40.0;
    #   const float gas_baseline = 10000.0;
    #   float gas_score = (id(gas_resistance).state / gas_baseline) * 100.0;
    #   float humidity_score = (100.0 - abs(humidity_baseline - id(humidity).state));
    #   return (gas_score + humidity_score) / 2.0;
    lambda: |-
      // Baseline gas resistance in ohms under known clean conditions.
      const float gas_baseline = 100000.0;

      // Gas reading from the BME680 sensor.
      float gas = id(gas_resistance).state;

      // If no valid reading, default to a "good" AQI.
      if (gas <= 0) {
        return 50.0;
      }

      // Calculate the ratio of baseline to current gas.
      float ratio = gas_baseline / gas;

      // Heuristic mapping to AQI:
      // At ratio = 1 (baseline), let's assign AQI ~ 50 (Moderate).
      // If ratio < 1 (gas > baseline => cleaner), we reduce AQI below 50.
      // If ratio > 1 (gas < baseline => more VOCs), we increase AQI above 50.
      // We'll use a power function for scaling:
      //
      // AQI = 50 * (ratio)^3 if ratio >= 1
      // AQI = 50 * (ratio)   if ratio < 1
      
      float aqi;
      if (ratio >= 1.0) {
        aqi = 50.0 * pow(ratio, 3.0); 
      } else {
        aqi = 50.0 * ratio; 
      }

      // Clamp AQI to a maximum of 500 for sanity's sake.
      if (aqi > 500.0) {
        aqi = 500.0;
      }

      // Ensure a minimum of 0.
      if (aqi < 0.0) {
        aqi = 0.0;
      }

      return aqi;

  - platform: template
    name: "CO2 Equivalent"
    device_class: carbon_dioxide
    unit_of_measurement: "ppm"
    lambda: |-
      const float gas_baseline = 100000.0;
      const float hum_baseline = 40.0;       // Ideal humidity baseline
      const float hum_weight   = 0.25;       // Weight factor for humidity correction

      float gas = id(gas_resistance).state;
      float hum = id(humidity).state;

      if (gas <= 0) {
        return 400.0;
      }

      float hum_offset = hum - hum_baseline;
      float hum_correction = 1.0 + (hum_weight * hum_offset / 100.0);

      float ratio = gas_baseline / (gas * hum_correction);
      float co2 = 400.0 * pow(ratio, 3.0);

      if (co2 < 400.0) {
        co2 = 400.0;
      }

      return co2;
  - platform: template
    name: "Breath VOC Equivalent"
    device_class: volatile_organic_compounds
    unit_of_measurement: "ppm"
    lambda: |-
      const float gas_baseline = 100000.0;

      // Minimum VOC reading at baseline conditions (just a guess; may be set to near-zero).
      const float min_voc_ppm = 0.05;

      // Read the current gas resistance from your BME680 sensor.
      float gas = id(gas_resistance).state;

      if (gas <= 0) {
        // If no valid reading, fall back to minimum baseline VOC.
        return min_voc_ppm;
      }

      // Calculate the ratio of baseline to current gas resistance.
      float ratio = gas_baseline / gas;

      // Use a power law to scale the ratio into a VOC ppm estimate.
      // If ratio = 1 (clean), VOC ~ 0.05 ppm.
      // If ratio > 1 (lower resistance => more VOC), VOC ppm will rise.
      float voc_ppm = min_voc_ppm * pow(ratio, 3.0);

      return voc_ppm;

number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset_ui
    unit_of_measurement: "°C"
    min_value: -10
    max_value: 10
    step: 0.1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:thermometer"
    entity_category: config

  - platform: template
    name: "Humidity Offset"
    id: humidity_offset_ui
    unit_of_measurement: "%"
    min_value: -50
    max_value: 50
    step: 0.1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:water-percent"
    entity_category: config

  - platform: template
    name: "Pressure Offset"
    id: pressure_offset_ui
    unit_of_measurement: "hPa"
    min_value: -500
    max_value: 500
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:gauge"
    entity_category: config

text_sensor:
  - platform: template
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }



      